Regex are used to deal with strings. Used to filter, replace, modify, manipulate and etc.
There are "flags".
i - insensitive, looks for both uppercase and lowercase strings.
g - global, looks for all the occurrences of an expression.
^ - Looks for the expression in the start of the string. (^testing)
$ - Looks for the expression in the end of the string. (testing$)
| - Works as OR, finding the expression before AND after the pipe (a|b).
+ - Looks for all the occurrences in sequence of the expression. (a+) Looks for all letter 'a' in sequence from a string.
. - Any other character that follows the expression (a. in 'Testing an event', takes 'an').
\ - Escape the expression to use special caracters ( \(..\) )
\w - Used to find any alphanumeric character.
\W - Is the inverse of \w, takes any non-alphanumeric character.
\d - Finds the numeric strings.
\D - Finds everything but numeric strings.
\s - Finds spaces.
\S - Finds anything that is not a space.
[] - Groups rules and apply all of them together. The result wil be a string that matches all the rules at the same time.
[a-z] - Takes all strings from 'a' to 'z'.
[A-Z] - Takes all uppercase strings from 'a' to 'z'.
{} - Defines the interval of repeated strings to be used ('a{1,2}' in 'Testing aaat night' results in 'aa')
(?=) - Positive lookahead. Looks for the expression if in front of the expression there is another expression. Ex: or(?=\s) looks for 'or' followed by a space after it.
(?!) - Negative lookahead. Looks for the expression if not in front of the expression there is another expression. Ex: or(?!\s) looks for 'or' that are not followed by a space after it.
(?<=) - Positive lookbehind. Looks for the expression preceeded by the second expression. Ex: (?<=k|p)or looks for 'or' preceeded by a 'k' or by a 'p'.
(?<!) - Negative lookbehind. Looks for the expression if not preceeded by the second expression. Ex: (?<!k)or looks for 'or' that are not preceeded by a 'k'.